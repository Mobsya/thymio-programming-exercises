<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="500" name="MOTOR"/>
<constant value="120" name="DELTA"/>
<constant value="500" name="THRESHOLD"/>


<!--show keywords state-->
<keywords flag="false"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Thymio-II program: proportional algorithm for searching
# Copyright 2013 by Moti Ben-Ari
# CreativeCommons BY-SA 3.0

# Constants
#  THRESHOLD for sensing the obstacle
#  MOTOR     power setting for the motor
#  DELTA     change in power for each detection by a sensor

var state  # The state 0 = off, 1 = on

state = 0
motor.left.target  = 0
motor.right.target = 0

# Proximity event handler
onevent prox
  # Do nothing in state 0
  if state == 0 then return end
  # If the rightmost sensor detects the obstacle,
  #   stop the motors
  if  prox.horizontal[4] > THRESHOLD then
    state = 0
    motor.left.target  = 0
    motor.right.target = 0
  # Otherwise reduce power by DELTA times the
  #   number of sensors that have detected the obstacle
  elseif  prox.horizontal[3] > THRESHOLD then
    motor.left.target  = -MOTOR + DELTA * 3
    motor.right.target =  MOTOR - DELTA * 3
  elseif  prox.horizontal[2] > THRESHOLD then
    motor.left.target  = -MOTOR + DELTA * 2
    motor.right.target =  MOTOR - DELTA * 2
  elseif  prox.horizontal[1] > THRESHOLD then
    motor.left.target  = -MOTOR + DELTA * 1
    motor.right.target =  MOTOR - DELTA * 1
  elseif  prox.horizontal[0] > THRESHOLD then
    motor.left.target  = -MOTOR + DELTA * 0
  	motor.right.target =  MOTOR - DELTA * 0
  end

# Start and stop the algorithm and the motors
onevent button.center
  if button.center == 1 then return end
  if state == 0 then
    state = 1
  else
    state = 0
    motor.left.target  = 0
    motor.right.target = 0
  end
</node>


</network>
