<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="120" name="THRESHOLD"/>
<constant value="40" name="CHANGE"/>
<constant value="100" name="INCREMENT"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Thymio-II program: measure the speed of the robot
# Copyright 2013 by Moti Ben-Ari
# CreativeCommons BY-SA 3.0

# Constants
#   THRESHOLD for sensing the tapes
#   CHANGE    percentage change of motor power for steering

# Variables
var motor          # The base value of the motor power
var motor_change   # The amount to change when approaching and turning

# States:
#   0 = off
#   1 = find start tape
#   2 = skip start tape
#   3 = drive straight
var state

# Counter of timer events (100ms each)
var time

# Initialization
state = 0
timer.period[0] = 100  # 100 ms = 0.1 seconds
motor = 0
motor.left.target = motor
motor.right.target = motor
call leds.circle(0,0,0,0,0,0,0,0)
call leds.buttons(32,0,0,0)

# Set the circle leds to indicate the motor power
sub set_circle_leds
  if motor/100==0 then call leds.circle(0,0,0,0,0,0,0,0) end
  if motor/100==1 then call leds.circle(32,0,0,0,0,0,0,0) end
  if motor/100==2 then call leds.circle(32,32,0,0,0,0,0,0) end
  if motor/100==3 then call leds.circle(32,32,32,0,0,0,0,0) end
  if motor/100==4 then call leds.circle(32,32,32,32,0,0,0,0) end
  if motor/100==5 then call leds.circle(32,32,32,32,32,0,0,0) end

# Left and right button event handlers
#   Increase or decrease motor power within 0-500
onevent button.left
  if  button.left == 0 then
    motor = motor - INCREMENT
    if  motor &lt; 0 then motor = 0 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

onevent button.right
  if  button.right == 0 then
    motor = motor + INCREMENT
    if  motor > 500 then motor = 500 end
    motor_change = (motor * CHANGE)/100
    callsub set_circle_leds
  end

# Stop the motors and set state to 0
sub stop
  state = 0
  motor = 0
  motor.left.target  = motor
  motor.right.target = motor
  callsub set_circle_leds
  call leds.buttons(32,0,0,0)

# When center button released
onevent button.center
  if  button.center == 0 then
    # If off, set state to 1 (on) and creep forward to find start tape
    if  state == 0 then
      state = 1
      motor.left.target  = motor - motor_change
      motor.right.target = motor - motor_change
      call leds.buttons(0,32,0,0)
    #   else if state is on, call stop
    else
      callsub stop
    end
  end

# Drive straight between the tapes
sub drive_straight
  # If both sensors find black, this is the stop tape
  if  prox.ground.delta[0] &lt; THRESHOLD and
      prox.ground.delta[1] &lt; THRESHOLD then
      callsub stop
  # If one of the ground sensors finds the tape
  #   turn the robot in the appropriate direction
  elseif  prox.ground.delta[0] &lt; THRESHOLD then
  	 motor.left.target  = motor + motor_change
  	 motor.right.target = motor - motor_change
  elseif  prox.ground.delta[1] &lt; THRESHOLD then
  	 motor.left.target  = motor - motor_change
  	 motor.right.target = motor + motor_change
  else
  # Otherwise, drive straight
     motor.left.target  = motor
     motor.right.target = motor
  end

# Start tape found
sub start_found
  # Change state to look for end of start tape
  if  prox.ground.delta[0] &lt; THRESHOLD and
      prox.ground.delta[1] &lt; THRESHOLD then
  	 state = 2
     call leds.buttons(0,0,32,0)
  end 

# End of start tape found
sub end_of_start_found
  if  prox.ground.delta[0] > THRESHOLD and
      prox.ground.delta[1] > THRESHOLD then
    # Change state to 3 (straight)
    state = 3
    # Initialize time counter to 0 and drive forward
    time = 0
    motor.left.target  = motor
    motor.right.target = motor
    call leds.buttons(0,0,0,32)
  end

# Proximity event occurs, call subroutine depending on the state
onevent prox
  # Check if the start tape has been found
  if  state == 1 then
	callsub start_found
  # Check if the end of the start tape has been found
  elseif state == 2 then
    callsub end_of_start_found
  # Drive straight until stop tape sets state to 0
  elseif state == 3 then
    callsub drive_straight
  end
  
# Timer event: increment the time counter
onevent timer0
  if state == 3 then
    time = time + 1
  end
</node>


</network>
