<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="8" name="GAIN_P"/>
<constant value="4000" name="TARGET"/>
<constant value="100" name="TARGET_ERROR"/>


<!--show keywords state-->
<keywords flag="false"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Thymio-II program: proportional algorithm for approaching
# Copyright 2013 by Moti Ben-Ari
# CreativeCommons BY-SA 3.0

# Constants
#  TARGET        highest value of the proximity sensor
#  TARGET_ERROR  stop when error is below this value
#  GAIN_P        power is error times gain

var state       # The state 0 = off, 1 = on
var error       # difference between sensor and target values
var motor_power # motor power setting depending on error

state = 0
motor.left.target  = 0
motor.right.target = 0

# Stop the algorithm and the motors
sub stop
  state = 0
  motor.left.target  = 0
  motor.right.target = 0

# Proximity event handler
onevent prox
  # Compute error and divide by a factor
  error = abs (TARGET - prox.horizontal[2])
  # Set the motor power to the error
  #    times the gain and check for saturation
  # Use muldiv to change gain of 0.125 to division by 8
  call math.muldiv(motor_power, error, 1, GAIN_P)
  if motor_power > 500 then motor_power = 500 end
  # Do nothing in state 0
  if state == 0 then return end
  # If it is less than the target error, stop
  if error &lt;  TARGET_ERROR then
    callsub stop
  #   otherwise, set the motor power
  else
    motor.left.target  =  motor_power
  	motor.right.target =  motor_power
  end

# Center button event handler
onevent button.center
  if button.center == 1 then return end
  if state == 0 then
    state = 1
  else
    callsub stop
  end
</node>


</network>
